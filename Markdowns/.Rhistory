da_results %>%
arrange(SpatialFDR)
milo
ncol(nhoods(milo))
library(miloR)
milo <- Milo(corrected)
milo <- runPCA(milo)
milo
milo <- buildGraph(milo, k = 60, d = 30)
milo <- buildGraph(milo, k = 60, d = 30, BPPARAM = MulticoreParam(7))
milo <- makeNhoods(milo, prop = 0.1, k = 60, d=30, refined = TRUE)
plotNhoodSizeHist(milo)
milo <- countCells(milo, meta.data = data.frame(colData(milo)), sample="SampleName")
head(nhoodCounts(milo))
design <- data.frame(colData(milo))[,c("SampleName", "SampleGroup")]
design <- distinct(design)
rownames(design) <- design$SampleName
design
milo <- calcNhoodDistance(milo, d=30)
da_results <- testNhoods(milo, design = ~ SampleGroup, design.df = design)
da_results %>%
arrange(SpatialFDR) %>%
head()
da_results %>%
arrange(SpatialFDR)
milo <- buildNhoodGraph(milo)
plotUMAP(milo) + plotNhoodGraphDA(milo, da_results, alpha=0.05) +
plot_layout(guides="collect")
milo <- buildGraph(milo, k = 60, d = 30, reduced.dim = "corrected", BPPARAM = MulticoreParam(7))
milo <- makeNhoods(milo, prop = 0.1, k = 60, d=30, refined = TRUE)
plotNhoodSizeHist(milo)
milo <- countCells(milo, meta.data = data.frame(colData(milo)), sample="SampleName")
head(nhoodCounts(milo))
design <- data.frame(colData(milo))[,c("SampleName", "SampleGroup")]
design <- distinct(design)
rownames(design) <- design$SampleName
design
milo <- calcNhoodDistance(milo, d=30)
sce
da_results <- testNhoods(milo, design = ~ SampleGroup, design.df = design)
da_results %>%
arrange(SpatialFDR) %>%
head()
milo <- buildNhoodGraph(milo)
plotUMAP(milo) + plotNhoodGraphDA(milo, da_results, alpha=0.05) +
plot_layout(guides="collect")
da_results %>%
arrange(SpatialFDR)
save.image("~/UnivCambridge_ScRnaSeqIntro_Base/Markdowns/multi_temp.RData")
library(scater)
library(scran)
library(PCAtools)
install.packages("PCAtools")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PCAtools")
library(scater)
library(scran)
library(PCAtools)
library(tidyverse)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(scater)
BiocManager::install("scater")
BiocManager::install("scran")
BiocManager::install("PCAtools")
library(scater)
library(scran)
library(PCAtools)
install.packages("stringi")
library(scater)
library(scran)
library(PCAtools)
library(tidyverse)
knitr::opts_chunk$set(error=FALSE,
message=FALSE,
warning=FALSE,
cache=TRUE,
purl=TRUE)
set.seed(123)
sce <- readRDS("R_objects/Caron_normalized.500.rds")
sce <- readRDS("R_objects/Caron_normalized.500.rds")
sce <- readRDS("R_objects/Caron_normalized.500.rds")
sce <- readRDS("R_objects/Caron_normalized.500.rds")
sce
rownames(sce) <- uniquifyFeatureNames(rownames(sce), rowData(sce)$Symbol)
gene_var <- modelGeneVar(sce)
gene_var %>%
as.data.frame() %>%
ggplot(aes(mean, total)) +
geom_point() +
geom_line(aes(y = tech), colour = "dodgerblue", size = 1) +
labs(x = "Mean of log-expression", y = "Variance of log-expression")
hvgs <- getTopHVGs(gene_var, prop=0.1)
length(hvgs)
hvgs[1:10]
plotExpression(sce, features = hvgs[1:20], point_alpha = 0.05)
sce <- runPCA(sce, subset_row = hvgs)
sce
reducedDim(sce, "PCA")[1:10, 1:5]
percent.var <- attr(reducedDim(sce), "percentVar")
plot(percent.var, log="y", xlab="PC", ylab="Variance explained (%)")
plotReducedDim(sce, dimred = "PCA", colour_by = "SampleName")
plotReducedDim(sce, dimred = "PCA", ncomponents = 3, colour_by = "SampleName")
ggcells(sce, aes(x = PCA.1, y = PCA.2, colour = SampleName)) +
geom_point(size = 0.5) +
facet_wrap(~ SampleName) +
labs(x = "PC1", y = "PC2", colour = "Sample")
explain_pcs <- getExplanatoryPCs(sce,
variables = c("sum",
"detected",
"SampleGroup",
"SampleName",
"subsets_Mito_percent")
)
plotExplanatoryPCs(explain_pcs/100)
plotExplanatoryVariables(sce,
variables = c(
"sum",
"detected",
"SampleGroup",
"SampleName",
"subsets_Mito_percent"
))
table(percent.var > 1)
chosen_elbow <- findElbowPoint(percent.var)
chosen_elbow
plot(percent.var)
abline(v=chosen_elbow, col="dodgerblue")
sce.denoised <- denoisePCA(sce, technical = gene_var)
ncol(reducedDim(sce.denoised, "PCA"))
# mock example
tibble(Observed = percent.var) %>%
rowid_to_column("PC") %>%
mutate(Permuted = 1) %>%
pivot_longer(c(Observed, Permuted), values_to = "Variance") %>%
ggplot(aes(PC, Variance)) +
geom_col(aes(fill = name), position = position_dodge()) +
geom_vline(xintercept = 8, linetype = 2) +
annotate(geom = "text", x = 8.1, y = 5, label = "PC8", hjust = 0) +
labs(fill = "", y = "% variance explained") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
theme(legend.position = c(1, 1), legend.justification = c(1, 1))
sce %>%
runTSNE(dimred = "PCA") %>%
ggcells(aes(TSNE.1, TSNE.2, colour = SampleName)) +
geom_point() +
ggthemes::scale_colour_tableau(palette = "Tableau 20") +
labs(colour = "Sample") +
theme_void()
# Run t-SNE ----
# add the t-SNE result to the reducedDim slot of the SCE object
# we name this reducedDim "TSNE_perplex50"
# we set perplexity = 50 (which is the default if we don't specify it)
# we run t-SNE based on the PCA we ran previously
set.seed(123) # set a random seed to ensure reproducibility
sce <- runTSNE(sce,
name = "TSNE_perplex50",
perplexity = 50,
dimred = "PCA",
n_dimred = 10)
# Make a custom visualisation using ggcells
ggcells(sce, aes(x = TSNE_perplex50.1, y = TSNE_perplex50.2,
colour = SampleName)) +
geom_point()
# Re-run the algorithm but change the random seed number.
# Do the results change dramatically between runs?
set.seed(321)
sce <- runTSNE(sce,
name = "TSNE_perplex50_seed321",
perplexity = 50,
dimred = "PCA",
n_dimred = 10)
ggcells(sce, aes(x = TSNE_perplex50_seed321.1, y = TSNE_perplex50_seed321.2,
colour = SampleName)) +
geom_point()
# Modify the visualisation to colour the points based on logcounts of known cell markers
# CD79A (B cells)
# CST3 (monocytes)
# CD3D (T cells)
# HBA1 (erythrocytes)
ggcells(sce, aes(x = TSNE_perplex50_seed321.1, y = TSNE_perplex50_seed321.2,
colour = CD79A)) +
geom_point() +
scale_colour_viridis_c() # this is a colour-blind safe palette
# Facet these plots by SampleName to better understand where each marker is mostly expressed
ggcells(sce, aes(x = TSNE_perplex50_seed321.1, y = TSNE_perplex50_seed321.2,
colour = CD79A)) +
geom_point() +
scale_colour_viridis_c() +
facet_wrap(~ SampleName)
# Explore different perplexity values (for example 5 and 500)
# Do you get tighter or looser clusters?
set.seed(321)
sce <- runTSNE(sce,
name = "TSNE_perplex5",
perplexity = 5,
dimred = "PCA",
n_dimred = 10)
sce <- runTSNE(sce,
name = "TSNE_perplex500",
perplexity = 500,
dimred = "PCA",
n_dimred = 10)
# visualise
ggcells(sce, aes(x = TSNE_perplex5.1, y = TSNE_perplex5.2,
colour = SampleName)) +
geom_point() +
labs(title = "Perplexity 5")
ggcells(sce, aes(x = TSNE_perplex50.1, y = TSNE_perplex50.2,
colour = SampleName)) +
geom_point() +
labs(title = "Perplexity 50")
ggcells(sce, aes(x = TSNE_perplex500.1, y = TSNE_perplex500.2,
colour = SampleName)) +
geom_point() +
labs(title = "Perplexity 500")
# Run UMAP ----
# run the UMAP with 50 neighbours
set.seed(123) # set seed for reproducibility
sce <- runUMAP(sce,
name = "UMAP_neighbors50",
dimred = "PCA",
n_neighbors = 50)
# visualise the resulting UMAP projection
# colour cells by sample
ggcells(sce, aes(x = UMAP_neighbors50.1, y = UMAP_neighbors50.2,
colour = SampleName)) +
geom_point() +
theme_void()
# run the UMAP with 5 and 500 neighbours and compare the results
set.seed(123) # set seed for reproducibility
sce <- runUMAP(sce,
name = "UMAP_neighbors5",
dimred = "PCA",
n_neighbors = 5)
sce <- runUMAP(sce,
name = "UMAP_neighbors500",
dimred = "PCA",
n_neighbors = 500)
ggcells(sce, aes(x = UMAP_neighbors5.1, y = UMAP_neighbors5.2,
colour = SampleName)) +
geom_point() +
theme_void() +
labs(title = "Neighbours = 5")
ggcells(sce, aes(x = UMAP_neighbors500.1, y = UMAP_neighbors500.2,
colour = SampleName)) +
geom_point() +
theme_void() +
labs(title = "Neighbours = 500")
# compare the UMAP projection with the t-SNE projections
# would you prefer one over the other?
ggcells(sce, aes(x = TSNE_perplex50.1, y = TSNE_perplex50.2,
colour = SampleName)) +
geom_point() +
theme_void()
ggcells(sce, aes(x = UMAP_neighbors50.1, y = UMAP_neighbors50.2,
colour = SampleName)) +
geom_point() +
theme_void()
colData(sce)
sce %>%
runTSNE(dimred = "PCA") %>%
ggcells(aes(TSNE.1, TSNE.2, colour = SampleName)) +
geom_point() +
#ggthemes::scale_colour_tableau(palette = "Tableau 20") +
labs(colour = "Sample") #+
#theme_void()
set.seed(123)
sce <- runUMAP(sce)
plotUMAP(sce, colour_by = "SampleName")
# convert SCE object to a Seurat object
library(Seurat)
?runUMAP
check <- readRDS("../Utilities/Caron_filtered.full.rds")
check
sce
library(scater)
library(scran)
library(PCAtools)
library(tidyverse)
library(scater)
library(scran)
library(PCAtools)
library(tidyverse)
knitr::opts_chunk$set(error=FALSE,
message=FALSE,
warning=FALSE,
cache=TRUE,
purl=TRUE)
set.seed(123)
sce <- readRDS("R_objects/Caron_normalized.500.rds")
sce
rownames(sce) <- uniquifyFeatureNames(rownames(sce), rowData(sce)$Symbol)
gene_var <- modelGeneVar(sce)
gene_var
plot(gene_var$mean, gene_var$total)
lines(gene_var$tech)
dev.off()
plot(gene_var$mean, gene_var$total)
lines(gene_var$mean, gene_var$tech)
dev.off()
plot(gene_var$mean, gene_var$total)
lines(gene_var$mean, gene_var$tech, type = "p")
lines(gene_var$mean, gene_var$tech, type = "p", col = "green")
dev.off()
hvgs <- getTopHVGs(gene_var, prop=0.1)
length(hvgs)
hvgs[1:10]
plotExpression(sce, features = hvgs[1:20], point_alpha = 0.05)
plot(gene_var$mean, gene_var$total)
lines(gene_var$mean, gene_var$tech, col = "green")
dev.off()
plot(gene_var$mean, gene_var$total)
lines(gene_var$mean, gene_var$tech, type = "c", col = "green")
dev.off()
sce <- runPCA(sce, subset_row = hvgs)
sce
reducedDim(sce, "PCA")[1:10, 1:5]
percent.var <- attr(reducedDim(sce), "percentVar")
plot(percent.var, log="y", xlab="PC", ylab="Variance explained (%)")
plot(gene_var$mean, gene_var$total)
plot(gene_var$mean, gene_var$tech, col = "green")
dev.off()
plotReducedDim(sce, dimred = "PCA", colour_by = "SampleName")
sum(percent.var > 1)
plotExplanatoryVariables(sce,
variables = c(
"sum",
"detected",
"SampleGroup",
"SampleName",
"subsets_Mito_percent"
))
library(scater)
library(scran)
library(PCAtools)
library(tidyverse)
knitr::opts_chunk$set(error=FALSE,
message=FALSE,
warning=FALSE,
cache=TRUE,
purl=TRUE)
set.seed(123)
sce <- readRDS("R_objects/Caron_normalized.500.rds")
sce
rownames(sce) <- uniquifyFeatureNames(rownames(sce), rowData(sce)$Symbol)
gene_var <- modelGeneVar(sce)
gene_var
gene_var %>%
as.data.frame() %>%
ggplot(aes(mean, total)) +
geom_point() +
geom_line(aes(y = tech), colour = "dodgerblue", size = 1) +
labs(x = "Mean of log-expression", y = "Variance of log-expression")
hvgs <- getTopHVGs(gene_var, prop=0.1)
length(hvgs)
hvgs[1:10]
plotExpression(sce, features = hvgs[1:20], point_alpha = 0.05)
sce <- runPCA(sce, subset_row = hvgs)
sce
reducedDim(sce, "PCA")[1:10, 1:5]
percent.var <- attr(reducedDim(sce), "percentVar")
plot(percent.var, log="y", xlab="PC", ylab="Variance explained (%)")
plotReducedDim(sce, dimred = "PCA", colour_by = "SampleName")
plotReducedDim(sce, dimred = "PCA", ncomponents = 3, colour_by = "SampleName")
ggcells(sce, aes(x = PCA.1, y = PCA.2, colour = SampleName)) +
geom_point(size = 0.5) +
facet_wrap(~ SampleName) +
labs(x = "PC1", y = "PC2", colour = "Sample")
explain_pcs <- getExplanatoryPCs(sce,
variables = c("sum",
"detected",
"SampleGroup",
"SampleName",
"subsets_Mito_percent")
)
plotExplanatoryPCs(explain_pcs/100)
plotExplanatoryVariables(sce,
variables = c(
"sum",
"detected",
"SampleGroup",
"SampleName",
"subsets_Mito_percent"
))
table(percent.var > 1)
chosen_elbow <- findElbowPoint(percent.var)
chosen_elbow
plot(percent.var)
abline(v=chosen_elbow, col="dodgerblue")
sce.denoised <- denoisePCA(sce, technical = gene_var)
ncol(reducedDim(sce.denoised, "PCA"))
# mock example
tibble(Observed = percent.var) %>%
rowid_to_column("PC") %>%
mutate(Permuted = 1) %>%
pivot_longer(c(Observed, Permuted), values_to = "Variance") %>%
ggplot(aes(PC, Variance)) +
geom_col(aes(fill = name), position = position_dodge()) +
geom_vline(xintercept = 8, linetype = 2) +
annotate(geom = "text", x = 8.1, y = 5, label = "PC8", hjust = 0) +
labs(fill = "", y = "% variance explained") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
theme(legend.position = c(1, 1), legend.justification = c(1, 1))
sce %>%
runTSNE(dimred = "PCA") %>%
ggcells(aes(TSNE.1, TSNE.2, colour = SampleName)) +
geom_point() +
labs(colour = "Sample")
sce <- runTSNE(sce)
plotTSNE(sce, colour_by = "SampleName")
set.seed(123)
sce <- runUMAP(sce)
plotUMAP(sce, colour_by = "SampleName")
# read our original SCE object
sce <- readRDS("R_objects/Caron_normalized.500.rds")
# convert SCE object to a Seurat object
library(Seurat)
seurat_obj <- as.Seurat(sce, counts = "counts", data = "logcounts")
# identify the 2000 most highly-variable genes
seurat_hvgs <- FindVariableFeatures(seurat_obj,
selection.method = "vst",
nfeatures = 2000)
# scale the data for PCA for the highly variable genes
seurat_obj <- ScaleData(seurat_obj, features = VariableFeatures(seurat_hvgs))
# run PCA
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(seurat_hvgs),
verbose = FALSE)
# PCA Plot
DimPlot(seurat_obj, reduction = "pca")
VizDimLoadings(seurat_obj, dims=1:2)
DimHeatmap(seurat_obj, dims = 1:2, cells = 500, balanced = TRUE)
sessionInfo()
knitr::purl("06_FeatureSelectionAndDimensionalityReduction.Rmd")
library(scater)
library(scran)
library(PCAtools)
library(tidyverse)
knitr::opts_chunk$set(error=FALSE,
message=FALSE,
warning=FALSE,
cache=TRUE,
purl=TRUE)
set.seed(123)
sce <- readRDS("R_objects/Caron_normalized.500.rds")
sce
rownames(sce) <- uniquifyFeatureNames(rownames(sce), rowData(sce)$Symbol)
gene_var <- modelGeneVar(sce)
gene_var
gene_var %>%
as.data.frame() %>%
ggplot(aes(mean, total)) +
geom_point() +
geom_line(aes(y = tech), colour = "dodgerblue", size = 1) +
labs(x = "Mean of log-expression", y = "Variance of log-expression")
hvgs <- getTopHVGs(gene_var, prop=0.1)
length(hvgs)
hvgs[1:10]
plotExpression(sce, features = hvgs[1:20], point_alpha = 0.05)
sce <- runPCA(sce, subset_row = hvgs)
sce
reducedDim(sce, "PCA")[1:10, 1:5]
percent.var <- attr(reducedDim(sce), "percentVar")
plot(percent.var, log="y", xlab="PC", ylab="Variance explained (%)")
plotReducedDim(sce, dimred = "PCA", colour_by = "SampleName")
plotReducedDim(sce, dimred = "PCA", ncomponents = 3, colour_by = "SampleName")
ggcells(sce, aes(x = PCA.1, y = PCA.2, colour = SampleName)) +
geom_point(size = 0.5) +
facet_wrap(~ SampleName) +
labs(x = "PC1", y = "PC2", colour = "Sample")
explain_pcs <- getExplanatoryPCs(sce,
variables = c("sum",
"detected",
"SampleGroup",
"SampleName",
"subsets_Mito_percent")
)
plotExplanatoryPCs(explain_pcs/100)
plotExplanatoryVariables(sce,
variables = c(
"sum",
"detected",
"SampleGroup",
"SampleName",
"subsets_Mito_percent"
))
load("~/temp.rds")
load("~/UnivCambridge_ScRnaSeqIntro_Base/Markdowns/multi_temp.RData")
ggplot(da_results, aes(PValue)) + geom_histogram(bins=50)
library(scater)
library(scran)
library(batchelor)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("batchelor")
BiocManager::install("edgeR")
library(scater)
library(scran)
library(batchelor)
library(edgeR)
library(tidyverse)
library(patchwork)
library(DT)
library(bluster)
ggplot(da_results, aes(PValue)) + geom_histogram(bins=50)
ggplot(da_results, aes(logFC, -log10(SpatialFDR))) +
geom_point() +
geom_hline(yintercept = 1) ## Mark significance threshold (10% FDR)
